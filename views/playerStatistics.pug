extends layout.pug

block scripts
	script.
		$(document).ready(function(){
			$('#player_scores_table').DataTable({
				searching: false,
				bInfo : false,
				order: [[ 2,  'desc' ]],
				columnDefs: [ { targets: [ 1 ], visible: true } ]	
			});
		});
	script.
		var dataImageMap = {
			'25': { '1': {'x': 300, 'y': 310}, '2': {'x': 300, 'y': 310} },
			'20': { '1': {'x': 300, 'y': 150}, '2': {'x': 300, 'y': 110}, '3': {'x': 300, 'y': 185} },
			'19': { '1': {'x': 248, 'y': 465}, '2': {'x': 236, 'y': 503}, '3': {'x': 261, 'y': 428} },
			'18': { '1': {'x': 394, 'y': 180}, '2': {'x': 416, 'y': 148}, '3': {'x': 371, 'y': 211} },
			'17': { '1': {'x': 348, 'y': 465}, '2': {'x': 361, 'y': 502}, '3': {'x': 336, 'y': 427} },
			'16': { '1': {'x': 167, 'y': 406}, '2': {'x': 136, 'y': 431}, '3': {'x': 199, 'y': 384} },
			'15': { '1': {'x': 431, 'y': 407}, '2': {'x': 462, 'y': 431}, '3': {'x': 399, 'y': 383} },
			'14': { '1': {'x': 144, 'y': 260}, '2': {'x': 108, 'y': 250}, '3': {'x': 182, 'y': 273} },
			'13': { '1': {'x': 451, 'y': 260}, '2': {'x': 488, 'y': 247}, '3': {'x': 415, 'y': 272} },
			'12': { '1': {'x': 202, 'y': 180}, '2': {'x': 182, 'y': 148}, '3': {'x': 226, 'y': 212} },
			'11': { '1': {'x': 135, 'y': 312}, '2': {'x': 97, 'y': 310}, '3': {'x': 176, 'y': 310} },
			'10': { '1': {'x': 452, 'y': 359}, '2': {'x': 492, 'y': 372}, '3': {'x': 417, 'y': 349} },
			'9': { '1': {'x': 166, 'y': 214}, '2': {'x': 135, 'y': 194}, '3': {'x': 199, 'y': 238} },
			'8': { '1': {'x': 143, 'y': 361}, '2': {'x': 107, 'y': 371}, '3': {'x': 181, 'y': 348} },
			'7': { '1': {'x': 203, 'y': 441}, '2': {'x': 178, 'y': 472}, '3': {'x': 226, 'y': 409} },
			'6': { '1': {'x': 463, 'y': 312}, '2': {'x': 500, 'y': 309}, '3': {'x': 422, 'y': 310} },
			'5': { '1': {'x': 250, 'y': 158}, '2': {'x': 235, 'y': 122}, '3': {'x': 260, 'y': 194} },
			'4': { '1': {'x': 431, 'y': 214}, '2': {'x': 462, 'y': 194}, '3': {'x': 399, 'y': 238} },
			'3': { '1': {'x': 300, 'y': 472}, '2': {'x': 300, 'y': 513}, '3': {'x': 300, 'y': 433} },
			'2': { '1': {'x': 396, 'y': 442}, '2': {'x': 418, 'y': 474}, '3': {'x': 372, 'y': 409} },
			'1': { '1': {'x': 348, 'y': 158}, '2': {'x': 361, 'y': 120}, '3': {'x': 336, 'y': 194} },
			'0': { '1': {'x': 50, 'y': 50} } }

		$(function () {
			$("#heatmap_value_selector").change(function () {
				var value = this.value;
				redraw(value);
			});
		});
		
		window.onload = function(){
			redraw();
		}

		function redraw(display = 0) {
			var size = 5;
			var spread = 20;
			var intensity = 30;

			var canvas = document.getElementsByTagName('canvas')[0];
			var heatmap = createWebGLHeatmap({ canvas: canvas, intensityToAlpha: true });
			
			var scoresMap = !{JSON.stringify(scoresMap)};
			for (var dart in scoresMap) {
				var dartScores = scoresMap[dart];
				for (var multiplier in dartScores) {
					if (display === 0 || multiplier === display) {
						var count = dartScores[multiplier];
						if (count !== 0) {
							var coordinatesX = dataImageMap[dart][multiplier]['x'];
							var coordinatesY = dataImageMap[dart][multiplier]['y'];
							for (var i = 0; i < count; i++) {
								paintAtCoord(heatmap, coordinatesX, coordinatesY, spread, size, intensity);
							}
						}
					}
				}
			}
			var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
				window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

			var update = function(){
				heatmap.adjustSize(); // can be commented out for statically sized heatmaps, resize clears the map
				heatmap.update(); // adds the buffered points
				heatmap.display(); // adds the buffered points
				raf(update);
			}
			raf(update);
		}
		function paintAtCoord(heatmap, x, y, spread, size, intensity) {
			var i = 0;
			while (i < 70) {
				var xoff = Math.random() * 2 - 1;
				var yoff = Math.random() * 2 - 1;
				var l = xoff * xoff + yoff * yoff;
				if (l > 1) {
					continue;
				}
				var ls = Math.sqrt(l);
				xoff /= ls;
				yoff /= ls;
				xoff *= 1 - l;
				yoff *= 1 - l;
				i += 1;
				heatmap.addPoint(x + xoff * spread, y + yoff * spread, size, intensity / 1000);
			}
		}	

block content
	h2 Statistics for #{player.name}

	div(class='table-responsive')
		table(id='player_statistics_table' class='table table-striped table-bordered')
			thead
				tr
					th Played
					th Won
					th Win %
					th First 9 PPD
					th Overall PPD
					th Checkout%
					th Scores
			tbody
					tr
						td
							p= player.gamesPlayed
						td
							p= player.gamesWon
						td
							p= player.gamesPlayed == 0 ? 0 : (player.gamesWon * 100 / player.gamesPlayed).toFixed(2)
						td
							p= player.first9ppd.toFixed(2)
						td
							p= player.ppd.toFixed(2)
						td
							p= (player.gamesWon * 100 / player.checkoutAttempts).toFixed(2) + '%'
						td
							p= player['60+'] == 0 ? "" : "60+: " + player['60+']
							p= player['100+'] == 0 ? "" : "100+: " + player['100+']
							p= player['140+'] == 0 ? "" : "140+: " + player['140+']
							p= player['180s'] == 0 ? "" : "180:  " + player['180s']

	div(class='table-responsive')
		h2 Hits	
		table(id='player_scores_table' class='table table-striped table-bordered')
			thead
				tr
					th Dart
					th Count
					th Hit %
			tbody
				each score, key in scoresMap
					each value, multiplier in scoresMap[key]
						tr
							td(class='col-sm-2 dart-score-container' data-order=key + multiplier)
								if multiplier == 3
									label(style='background-color: #d9534f')= 'T-' + key
								else if multiplier == 2
									if key == 25
										label(style='background-color: orange') Bull
									else
										label(style='background-color: orange')= 'D-' + key
								else
									if key == 0 
										label Miss
									else if key == 25
										label Bull
									else
										label= key
							td= value
							td= (value * 100 / scoresMap.totalThrows).toFixed(2) + '%'

	h2 Heatmap
	select(id='heatmap_value_selector' name='dartValues')
		option(value=0 default=true) All
		option(value=1) Singles
		option(value=2) Doubles
		option(value=3) Trebles
	div(style='text-align: center;')
		canvas(id='dartboard-heatmap')
